openapi: 3.0.3
info:
  title: Zentara Threat Intelligence API
  description: |
    A secure, scalable threat intelligence backend system built with Go, implementing Clean Architecture principles with comprehensive monitoring and observability.
    
    ## Features
    - JWT Authentication with access & refresh tokens
    - Role-based Access Control (Admin, Analyst, Viewer)
    - Order Management for threat intelligence data
    - Rate Limiting and security middleware
    - Comprehensive logging with structured JSON format
    
    ## Authentication
    This API uses Bearer token authentication. Include the JWT access token in the Authorization header:
    ```
    Authorization: Bearer <your-access-token>
    ```
  version: 1.0.0
  contact:
    name: Rahmatullah Sidik
    email: rahmatullah@zentara.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.zentara.com
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the service is running
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: threat-intel-backend

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT tokens
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Refresh access token using refresh token
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/orders:
    post:
      tags:
        - Orders
      summary: Create order
      description: Create a new order for threat intelligence data
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request data or invalid item_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Orders
      summary: Get user orders
      description: Get all orders for the authenticated user
      operationId: getUserOrders
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Get order by ID. Users can only access their own orders unless they have analyst+ permissions
      operationId: getOrder
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/users:
    get:
      tags:
        - Admin
      summary: List users (Admin only)
      description: Get list of all users - requires admin role
      operationId: listUsers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Admin endpoint - list users"
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/analyst/reports:
    get:
      tags:
        - Analyst
      summary: View reports (Analyst+ only)
      description: Get threat intelligence reports - requires analyst or admin role
      operationId: viewReports
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Reports retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Analyst endpoint - view reports"
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - analyst+ role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token for authentication

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          minLength: 6
          description: User password (minimum 6 characters)
          example: "password123"

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          minLength: 6
          description: User password (minimum 6 characters)
          example: "password123"
        role:
          $ref: '#/components/schemas/UserRole'

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token (expires in 15 minutes)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: JWT refresh token (expires in 7 days)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    CreateOrderRequest:
      type: object
      required:
        - item_id
        - quantity
      properties:
        item_id:
          type: string
          enum:
            - intel-basic
            - intel-premium
            - intel-enterprise
          description: Threat intelligence package ID
          example: "intel-basic"
        quantity:
          type: integer
          minimum: 1
          description: Number of items to order
          example: 1

    OrderResponse:
      type: object
      properties:
        order_id:
          type: string
          format: uuid
          description: Unique order identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        status:
          $ref: '#/components/schemas/OrderStatus'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        role:
          $ref: '#/components/schemas/UserRole'
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-01T00:00:00Z"

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique order identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        user_id:
          type: string
          format: uuid
          description: ID of the user who created the order
          example: "123e4567-e89b-12d3-a456-426614174000"
        item_id:
          type: string
          description: Threat intelligence package ID
          example: "intel-basic"
        quantity:
          type: integer
          description: Number of items ordered
          example: 1
        status:
          $ref: '#/components/schemas/OrderStatus'
        created_at:
          type: string
          format: date-time
          description: Order creation timestamp
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-01T00:00:00Z"
        user:
          $ref: '#/components/schemas/User'

    UserRole:
      type: string
      enum:
        - viewer
        - analyst
        - admin
      description: |
        User role with hierarchical permissions:
        - **viewer**: Can create and view own orders
        - **analyst**: Can view all orders and access reports
        - **admin**: Full access to all resources and user management

    OrderStatus:
      type: string
      enum:
        - pending
        - confirmed
        - completed
        - cancelled
      description: Current status of the order

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message describing what went wrong
          example: "Invalid credentials"

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Authorization header required"

    ForbiddenError:
      description: Insufficient permissions for the requested operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Insufficient permissions"

    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Resource not found"

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Invalid request data"

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Rate limit exceeded"

tags:
  - name: Health
    description: Service health check endpoints
  - name: Authentication
    description: User authentication and token management
  - name: Orders
    description: Threat intelligence order management
  - name: Admin
    description: Administrative endpoints (admin role required)
  - name: Analyst
    description: Analyst endpoints (analyst+ role required)